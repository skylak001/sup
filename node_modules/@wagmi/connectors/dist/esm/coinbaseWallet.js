import {} from '@coinbase/wallet-sdk';
import { ChainNotConfiguredError, createConnector, normalizeChainId, } from '@wagmi/core';
import { SwitchChainError, UserRejectedRequestError, getAddress, numberToHex, } from 'viem';
coinbaseWallet.type = 'coinbaseWallet';
export function coinbaseWallet(parameters) {
    const reloadOnDisconnect = false;
    let sdk;
    let walletProvider;
    return createConnector((config) => ({
        id: 'coinbaseWalletSDK',
        name: 'Coinbase Wallet',
        type: coinbaseWallet.type,
        async connect({ chainId } = {}) {
            try {
                const provider = await this.getProvider();
                const accounts = (await provider.request({
                    method: 'eth_requestAccounts',
                })).map((x) => getAddress(x));
                provider.on('accountsChanged', this.onAccountsChanged);
                provider.on('chainChanged', this.onChainChanged);
                provider.on('disconnect', this.onDisconnect.bind(this));
                // Switch to chain if provided
                let currentChainId = await this.getChainId();
                if (chainId && currentChainId !== chainId) {
                    const chain = await this.switchChain({ chainId }).catch((error) => {
                        if (error.code === UserRejectedRequestError.code)
                            throw error;
                        return { id: currentChainId };
                    });
                    currentChainId = chain?.id ?? currentChainId;
                }
                return { accounts, chainId: currentChainId };
            }
            catch (error) {
                if (/(user closed modal|accounts received is empty|user denied account)/i.test(error.message))
                    throw new UserRejectedRequestError(error);
                throw error;
            }
        },
        async disconnect() {
            const provider = await this.getProvider();
            provider.removeListener('accountsChanged', this.onAccountsChanged);
            provider.removeListener('chainChanged', this.onChainChanged);
            provider.removeListener('disconnect', this.onDisconnect.bind(this));
            provider.disconnect();
            provider.close();
        },
        async getAccounts() {
            const provider = await this.getProvider();
            return (await provider.request({
                method: 'eth_accounts',
            })).map((x) => getAddress(x));
        },
        async getChainId() {
            const provider = await this.getProvider();
            const chainId = await provider.request({ method: 'eth_chainId' });
            return normalizeChainId(chainId);
        },
        async getProvider() {
            if (!walletProvider) {
                const { default: CoinbaseWalletSDK } = await import('@coinbase/wallet-sdk');
                let SDK;
                if (typeof CoinbaseWalletSDK !== 'function' &&
                    typeof CoinbaseWalletSDK.default === 'function')
                    SDK = CoinbaseWalletSDK.default;
                else
                    SDK = CoinbaseWalletSDK;
                sdk = new SDK({ reloadOnDisconnect, ...parameters });
                // Force types to retrieve private `walletExtension` method from the Coinbase Wallet SDK.
                const walletExtensionChainId = sdk.walletExtension?.getChainId();
                const chain = config.chains.find((chain) => parameters.chainId
                    ? chain.id === parameters.chainId
                    : chain.id === walletExtensionChainId) || config.chains[0];
                const chainId = parameters.chainId || chain?.id;
                const jsonRpcUrl = parameters.jsonRpcUrl || chain?.rpcUrls.default.http[0];
                walletProvider = sdk.makeWeb3Provider(jsonRpcUrl, chainId);
            }
            return walletProvider;
        },
        async isAuthorized() {
            try {
                const accounts = await this.getAccounts();
                return !!accounts.length;
            }
            catch {
                return false;
            }
        },
        async switchChain({ chainId }) {
            const chain = config.chains.find((chain) => chain.id === chainId);
            if (!chain)
                throw new SwitchChainError(new ChainNotConfiguredError());
            const provider = await this.getProvider();
            const chainId_ = numberToHex(chain.id);
            try {
                await provider.request({
                    method: 'wallet_switchEthereumChain',
                    params: [{ chainId: chainId_ }],
                });
                return chain;
            }
            catch (error) {
                // Indicates chain is not added to provider
                if (error.code === 4902) {
                    try {
                        await provider.request({
                            method: 'wallet_addEthereumChain',
                            params: [
                                {
                                    chainId: chainId_,
                                    chainName: chain.name,
                                    nativeCurrency: chain.nativeCurrency,
                                    rpcUrls: [chain.rpcUrls.default?.http[0] ?? ''],
                                    blockExplorerUrls: [chain.blockExplorers?.default.url],
                                },
                            ],
                        });
                        return chain;
                    }
                    catch (error) {
                        throw new UserRejectedRequestError(error);
                    }
                }
                throw new SwitchChainError(error);
            }
        },
        onAccountsChanged(accounts) {
            if (accounts.length === 0)
                config.emitter.emit('disconnect');
            else
                config.emitter.emit('change', {
                    accounts: accounts.map((x) => getAddress(x)),
                });
        },
        onChainChanged(chain) {
            const chainId = normalizeChainId(chain);
            config.emitter.emit('change', { chainId });
        },
        async onDisconnect(_error) {
            config.emitter.emit('disconnect');
            const provider = await this.getProvider();
            provider.removeListener('accountsChanged', this.onAccountsChanged);
            provider.removeListener('chainChanged', this.onChainChanged);
            provider.removeListener('disconnect', this.onDisconnect.bind(this));
        },
    }));
}
//# sourceMappingURL=coinbaseWallet.js.map