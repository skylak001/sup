import { LitElement } from 'lit';
type Target = 'sourceToken' | 'toToken';
interface TokenInfo {
    address: `0x${string}`;
    symbol: string;
    name: string;
    decimals: number;
    logoURI: string;
    domainVersion?: string;
    eip2612?: boolean;
    isFoT?: boolean;
    tags?: string[];
}
export declare class W3mConvertInput extends LitElement {
    static styles: import("lit").CSSResult[];
    focused: boolean;
    balance: string | undefined;
    value?: string;
    price: number;
    marketValue?: string;
    disabled?: boolean;
    target: Target;
    token?: TokenInfo;
    onSetAmount: ((target: Target, value: string) => void) | null;
    onSetMaxValue: ((target: Target, balance: string | undefined) => void) | null;
    render(): import("lit-html").TemplateResult<1>;
    private handleKeydown;
    private dispatchInputChangeEvent;
    private setMaxValueToInput;
    private templateTokenSelectButton;
    private tokenBalanceTemplate;
    private tokenActionButtonTemplate;
    private onFocusChange;
    private onSelectToken;
    private onBuyToken;
}
declare global {
    interface HTMLElementTagNameMap {
        'w3m-convert-input': W3mConvertInput;
    }
}
export {};
